// Code generated by Prisma (prisma@1.30.5). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  gemRewardType: (where?: GemRewardTypeWhereInput) => Promise<boolean>;
  gemTransaction: (where?: GemTransactionWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userWallet: (where?: UserWalletWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  gemRewardType: (where: GemRewardTypeWhereUniqueInput) => GemRewardTypePromise;
  gemRewardTypes: (
    args?: {
      where?: GemRewardTypeWhereInput;
      orderBy?: GemRewardTypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<GemRewardType>;
  gemRewardTypesConnection: (
    args?: {
      where?: GemRewardTypeWhereInput;
      orderBy?: GemRewardTypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GemRewardTypeConnectionPromise;
  gemTransaction: (
    where: GemTransactionWhereUniqueInput
  ) => GemTransactionPromise;
  gemTransactions: (
    args?: {
      where?: GemTransactionWhereInput;
      orderBy?: GemTransactionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<GemTransaction>;
  gemTransactionsConnection: (
    args?: {
      where?: GemTransactionWhereInput;
      orderBy?: GemTransactionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GemTransactionConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  userWallet: (where: UserWalletWhereUniqueInput) => UserWalletPromise;
  userWallets: (
    args?: {
      where?: UserWalletWhereInput;
      orderBy?: UserWalletOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserWallet>;
  userWalletsConnection: (
    args?: {
      where?: UserWalletWhereInput;
      orderBy?: UserWalletOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserWalletConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGemRewardType: (data: GemRewardTypeCreateInput) => GemRewardTypePromise;
  updateGemRewardType: (
    args: {
      data: GemRewardTypeUpdateInput;
      where: GemRewardTypeWhereUniqueInput;
    }
  ) => GemRewardTypePromise;
  updateManyGemRewardTypes: (
    args: {
      data: GemRewardTypeUpdateManyMutationInput;
      where?: GemRewardTypeWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertGemRewardType: (
    args: {
      where: GemRewardTypeWhereUniqueInput;
      create: GemRewardTypeCreateInput;
      update: GemRewardTypeUpdateInput;
    }
  ) => GemRewardTypePromise;
  deleteGemRewardType: (
    where: GemRewardTypeWhereUniqueInput
  ) => GemRewardTypePromise;
  deleteManyGemRewardTypes: (
    where?: GemRewardTypeWhereInput
  ) => BatchPayloadPromise;
  createGemTransaction: (
    data: GemTransactionCreateInput
  ) => GemTransactionPromise;
  updateGemTransaction: (
    args: {
      data: GemTransactionUpdateInput;
      where: GemTransactionWhereUniqueInput;
    }
  ) => GemTransactionPromise;
  updateManyGemTransactions: (
    args: {
      data: GemTransactionUpdateManyMutationInput;
      where?: GemTransactionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertGemTransaction: (
    args: {
      where: GemTransactionWhereUniqueInput;
      create: GemTransactionCreateInput;
      update: GemTransactionUpdateInput;
    }
  ) => GemTransactionPromise;
  deleteGemTransaction: (
    where: GemTransactionWhereUniqueInput
  ) => GemTransactionPromise;
  deleteManyGemTransactions: (
    where?: GemTransactionWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserWallet: (data: UserWalletCreateInput) => UserWalletPromise;
  updateUserWallet: (
    args: { data: UserWalletUpdateInput; where: UserWalletWhereUniqueInput }
  ) => UserWalletPromise;
  updateManyUserWallets: (
    args: {
      data: UserWalletUpdateManyMutationInput;
      where?: UserWalletWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertUserWallet: (
    args: {
      where: UserWalletWhereUniqueInput;
      create: UserWalletCreateInput;
      update: UserWalletUpdateInput;
    }
  ) => UserWalletPromise;
  deleteUserWallet: (where: UserWalletWhereUniqueInput) => UserWalletPromise;
  deleteManyUserWallets: (where?: UserWalletWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  gemRewardType: (
    where?: GemRewardTypeSubscriptionWhereInput
  ) => GemRewardTypeSubscriptionPayloadSubscription;
  gemTransaction: (
    where?: GemTransactionSubscriptionWhereInput
  ) => GemTransactionSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userWallet: (
    where?: UserWalletSubscriptionWhereInput
  ) => UserWalletSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type GemRewardTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "contents_ASC"
  | "contents_DESC"
  | "createTime_ASC"
  | "createTime_DESC"
  | "updateTime_ASC"
  | "updateTime_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GemTransactionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "blockNumber_ASC"
  | "blockNumber_DESC"
  | "createTime_ASC"
  | "createTime_DESC"
  | "receiverAddress_ASC"
  | "receiverAddress_DESC"
  | "receiverUserRowId_ASC"
  | "receiverUserRowId_DESC"
  | "rewardType_ASC"
  | "rewardType_DESC"
  | "senderAddress_ASC"
  | "senderAddress_DESC"
  | "senderUserRowId_ASC"
  | "senderUserRowId_DESC"
  | "status_ASC"
  | "status_DESC"
  | "txhash_ASC"
  | "txhash_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "createTime_ASC"
  | "createTime_DESC"
  | "email_ASC"
  | "email_DESC"
  | "updateTime_ASC"
  | "updateTime_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserWalletOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "address_ASC"
  | "address_DESC"
  | "createTime_ASC"
  | "createTime_DESC"
  | "status_ASC"
  | "status_DESC"
  | "updateTime_ASC"
  | "updateTime_DESC"
  | "userRowId_ASC"
  | "userRowId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface UserWalletWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  createTime?: DateTimeInput;
  createTime_not?: DateTimeInput;
  createTime_in?: DateTimeInput[] | DateTimeInput;
  createTime_not_in?: DateTimeInput[] | DateTimeInput;
  createTime_lt?: DateTimeInput;
  createTime_lte?: DateTimeInput;
  createTime_gt?: DateTimeInput;
  createTime_gte?: DateTimeInput;
  status?: Boolean;
  status_not?: Boolean;
  updateTime?: DateTimeInput;
  updateTime_not?: DateTimeInput;
  updateTime_in?: DateTimeInput[] | DateTimeInput;
  updateTime_not_in?: DateTimeInput[] | DateTimeInput;
  updateTime_lt?: DateTimeInput;
  updateTime_lte?: DateTimeInput;
  updateTime_gt?: DateTimeInput;
  updateTime_gte?: DateTimeInput;
  user_every?: UserWhereInput;
  user_some?: UserWhereInput;
  user_none?: UserWhereInput;
  userRowId?: Int;
  userRowId_not?: Int;
  userRowId_in?: Int[] | Int;
  userRowId_not_in?: Int[] | Int;
  userRowId_lt?: Int;
  userRowId_lte?: Int;
  userRowId_gt?: Int;
  userRowId_gte?: Int;
  AND?: UserWalletWhereInput[] | UserWalletWhereInput;
  OR?: UserWalletWhereInput[] | UserWalletWhereInput;
  NOT?: UserWalletWhereInput[] | UserWalletWhereInput;
}

export interface UserWalletCreateOneWithoutUserInput {
  create?: UserWalletCreateWithoutUserInput;
  connect?: UserWalletWhereUniqueInput;
}

export interface UserCreateManyWithoutWalletIdInput {
  create?: UserCreateWithoutWalletIdInput[] | UserCreateWithoutWalletIdInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export type GemRewardTypeWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface UserWalletCreateInput {
  address?: String;
  createTime?: DateTimeInput;
  status?: Boolean;
  updateTime?: DateTimeInput;
  user?: UserCreateManyWithoutWalletIdInput;
  userRowId?: Int;
}

export interface GemRewardTypeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GemRewardTypeWhereInput;
  AND?:
    | GemRewardTypeSubscriptionWhereInput[]
    | GemRewardTypeSubscriptionWhereInput;
  OR?:
    | GemRewardTypeSubscriptionWhereInput[]
    | GemRewardTypeSubscriptionWhereInput;
  NOT?:
    | GemRewardTypeSubscriptionWhereInput[]
    | GemRewardTypeSubscriptionWhereInput;
}

export type UserWalletWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface UserUpdateManyDataInput {
  code?: String;
  createTime?: DateTimeInput;
  email?: String;
  updateTime?: DateTimeInput;
  userId?: Int;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export type GemTransactionWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface UserUpdateManyMutationInput {
  code?: String;
  createTime?: DateTimeInput;
  email?: String;
  updateTime?: DateTimeInput;
  userId?: Int;
}

export interface GemTransactionWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  amount?: Int;
  amount_not?: Int;
  amount_in?: Int[] | Int;
  amount_not_in?: Int[] | Int;
  amount_lt?: Int;
  amount_lte?: Int;
  amount_gt?: Int;
  amount_gte?: Int;
  blockNumber?: String;
  blockNumber_not?: String;
  blockNumber_in?: String[] | String;
  blockNumber_not_in?: String[] | String;
  blockNumber_lt?: String;
  blockNumber_lte?: String;
  blockNumber_gt?: String;
  blockNumber_gte?: String;
  blockNumber_contains?: String;
  blockNumber_not_contains?: String;
  blockNumber_starts_with?: String;
  blockNumber_not_starts_with?: String;
  blockNumber_ends_with?: String;
  blockNumber_not_ends_with?: String;
  createTime?: DateTimeInput;
  createTime_not?: DateTimeInput;
  createTime_in?: DateTimeInput[] | DateTimeInput;
  createTime_not_in?: DateTimeInput[] | DateTimeInput;
  createTime_lt?: DateTimeInput;
  createTime_lte?: DateTimeInput;
  createTime_gt?: DateTimeInput;
  createTime_gte?: DateTimeInput;
  receiverAddress?: String;
  receiverAddress_not?: String;
  receiverAddress_in?: String[] | String;
  receiverAddress_not_in?: String[] | String;
  receiverAddress_lt?: String;
  receiverAddress_lte?: String;
  receiverAddress_gt?: String;
  receiverAddress_gte?: String;
  receiverAddress_contains?: String;
  receiverAddress_not_contains?: String;
  receiverAddress_starts_with?: String;
  receiverAddress_not_starts_with?: String;
  receiverAddress_ends_with?: String;
  receiverAddress_not_ends_with?: String;
  receiverUserRowId?: Int;
  receiverUserRowId_not?: Int;
  receiverUserRowId_in?: Int[] | Int;
  receiverUserRowId_not_in?: Int[] | Int;
  receiverUserRowId_lt?: Int;
  receiverUserRowId_lte?: Int;
  receiverUserRowId_gt?: Int;
  receiverUserRowId_gte?: Int;
  rewardType?: String;
  rewardType_not?: String;
  rewardType_in?: String[] | String;
  rewardType_not_in?: String[] | String;
  rewardType_lt?: String;
  rewardType_lte?: String;
  rewardType_gt?: String;
  rewardType_gte?: String;
  rewardType_contains?: String;
  rewardType_not_contains?: String;
  rewardType_starts_with?: String;
  rewardType_not_starts_with?: String;
  rewardType_ends_with?: String;
  rewardType_not_ends_with?: String;
  senderAddress?: String;
  senderAddress_not?: String;
  senderAddress_in?: String[] | String;
  senderAddress_not_in?: String[] | String;
  senderAddress_lt?: String;
  senderAddress_lte?: String;
  senderAddress_gt?: String;
  senderAddress_gte?: String;
  senderAddress_contains?: String;
  senderAddress_not_contains?: String;
  senderAddress_starts_with?: String;
  senderAddress_not_starts_with?: String;
  senderAddress_ends_with?: String;
  senderAddress_not_ends_with?: String;
  senderUserRowId?: Int;
  senderUserRowId_not?: Int;
  senderUserRowId_in?: Int[] | Int;
  senderUserRowId_not_in?: Int[] | Int;
  senderUserRowId_lt?: Int;
  senderUserRowId_lte?: Int;
  senderUserRowId_gt?: Int;
  senderUserRowId_gte?: Int;
  status?: Boolean;
  status_not?: Boolean;
  txhash?: String;
  txhash_not?: String;
  txhash_in?: String[] | String;
  txhash_not_in?: String[] | String;
  txhash_lt?: String;
  txhash_lte?: String;
  txhash_gt?: String;
  txhash_gte?: String;
  txhash_contains?: String;
  txhash_not_contains?: String;
  txhash_starts_with?: String;
  txhash_not_starts_with?: String;
  txhash_ends_with?: String;
  txhash_not_ends_with?: String;
  AND?: GemTransactionWhereInput[] | GemTransactionWhereInput;
  OR?: GemTransactionWhereInput[] | GemTransactionWhereInput;
  NOT?: GemTransactionWhereInput[] | GemTransactionWhereInput;
}

export interface UserWalletUpsertWithoutUserInput {
  update: UserWalletUpdateWithoutUserDataInput;
  create: UserWalletCreateWithoutUserInput;
}

export interface UserUpsertWithWhereUniqueWithoutWalletIdInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutWalletIdDataInput;
  create: UserCreateWithoutWalletIdInput;
}

export interface UserWalletUpdateWithoutUserDataInput {
  address?: String;
  createTime?: DateTimeInput;
  status?: Boolean;
  updateTime?: DateTimeInput;
  userRowId?: Int;
}

export interface UserUpdateWithWhereUniqueWithoutWalletIdInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutWalletIdDataInput;
}

export interface UserWalletUpdateOneWithoutUserInput {
  create?: UserWalletCreateWithoutUserInput;
  update?: UserWalletUpdateWithoutUserDataInput;
  upsert?: UserWalletUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWalletWhereUniqueInput;
}

export interface UserUpdateManyWithoutWalletIdInput {
  create?: UserCreateWithoutWalletIdInput[] | UserCreateWithoutWalletIdInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutWalletIdInput[]
    | UserUpdateWithWhereUniqueWithoutWalletIdInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutWalletIdInput[]
    | UserUpsertWithWhereUniqueWithoutWalletIdInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  code?: String;
  code_not?: String;
  code_in?: String[] | String;
  code_not_in?: String[] | String;
  code_lt?: String;
  code_lte?: String;
  code_gt?: String;
  code_gte?: String;
  code_contains?: String;
  code_not_contains?: String;
  code_starts_with?: String;
  code_not_starts_with?: String;
  code_ends_with?: String;
  code_not_ends_with?: String;
  createTime?: DateTimeInput;
  createTime_not?: DateTimeInput;
  createTime_in?: DateTimeInput[] | DateTimeInput;
  createTime_not_in?: DateTimeInput[] | DateTimeInput;
  createTime_lt?: DateTimeInput;
  createTime_lte?: DateTimeInput;
  createTime_gt?: DateTimeInput;
  createTime_gte?: DateTimeInput;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  updateTime?: DateTimeInput;
  updateTime_not?: DateTimeInput;
  updateTime_in?: DateTimeInput[] | DateTimeInput;
  updateTime_not_in?: DateTimeInput[] | DateTimeInput;
  updateTime_lt?: DateTimeInput;
  updateTime_lte?: DateTimeInput;
  updateTime_gt?: DateTimeInput;
  updateTime_gte?: DateTimeInput;
  userId?: Int;
  userId_not?: Int;
  userId_in?: Int[] | Int;
  userId_not_in?: Int[] | Int;
  userId_lt?: Int;
  userId_lte?: Int;
  userId_gt?: Int;
  userId_gte?: Int;
  walletId?: UserWalletWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface GemTransactionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GemTransactionWhereInput;
  AND?:
    | GemTransactionSubscriptionWhereInput[]
    | GemTransactionSubscriptionWhereInput;
  OR?:
    | GemTransactionSubscriptionWhereInput[]
    | GemTransactionSubscriptionWhereInput;
  NOT?:
    | GemTransactionSubscriptionWhereInput[]
    | GemTransactionSubscriptionWhereInput;
}

export interface GemRewardTypeCreateInput {
  amount?: Int;
  contents?: String;
  createTime?: DateTimeInput;
  updateTime?: DateTimeInput;
}

export interface UserWalletUpdateManyMutationInput {
  address?: String;
  createTime?: DateTimeInput;
  status?: Boolean;
  updateTime?: DateTimeInput;
  userRowId?: Int;
}

export interface GemRewardTypeUpdateInput {
  amount?: Int;
  contents?: String;
  createTime?: DateTimeInput;
  updateTime?: DateTimeInput;
}

export interface UserScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  code?: String;
  code_not?: String;
  code_in?: String[] | String;
  code_not_in?: String[] | String;
  code_lt?: String;
  code_lte?: String;
  code_gt?: String;
  code_gte?: String;
  code_contains?: String;
  code_not_contains?: String;
  code_starts_with?: String;
  code_not_starts_with?: String;
  code_ends_with?: String;
  code_not_ends_with?: String;
  createTime?: DateTimeInput;
  createTime_not?: DateTimeInput;
  createTime_in?: DateTimeInput[] | DateTimeInput;
  createTime_not_in?: DateTimeInput[] | DateTimeInput;
  createTime_lt?: DateTimeInput;
  createTime_lte?: DateTimeInput;
  createTime_gt?: DateTimeInput;
  createTime_gte?: DateTimeInput;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  updateTime?: DateTimeInput;
  updateTime_not?: DateTimeInput;
  updateTime_in?: DateTimeInput[] | DateTimeInput;
  updateTime_not_in?: DateTimeInput[] | DateTimeInput;
  updateTime_lt?: DateTimeInput;
  updateTime_lte?: DateTimeInput;
  updateTime_gt?: DateTimeInput;
  updateTime_gte?: DateTimeInput;
  userId?: Int;
  userId_not?: Int;
  userId_in?: Int[] | Int;
  userId_not_in?: Int[] | Int;
  userId_lt?: Int;
  userId_lte?: Int;
  userId_gt?: Int;
  userId_gte?: Int;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface GemRewardTypeUpdateManyMutationInput {
  amount?: Int;
  contents?: String;
  createTime?: DateTimeInput;
  updateTime?: DateTimeInput;
}

export interface UserUpdateWithoutWalletIdDataInput {
  code?: String;
  createTime?: DateTimeInput;
  email?: String;
  updateTime?: DateTimeInput;
  userId?: Int;
}

export interface UserUpdateInput {
  code?: String;
  createTime?: DateTimeInput;
  email?: String;
  updateTime?: DateTimeInput;
  userId?: Int;
  walletId?: UserWalletUpdateOneWithoutUserInput;
}

export interface UserWalletUpdateInput {
  address?: String;
  createTime?: DateTimeInput;
  status?: Boolean;
  updateTime?: DateTimeInput;
  user?: UserUpdateManyWithoutWalletIdInput;
  userRowId?: Int;
}

export interface UserWalletCreateWithoutUserInput {
  address?: String;
  createTime?: DateTimeInput;
  status?: Boolean;
  updateTime?: DateTimeInput;
  userRowId?: Int;
}

export interface UserCreateWithoutWalletIdInput {
  code?: String;
  createTime?: DateTimeInput;
  email?: String;
  updateTime?: DateTimeInput;
  userId?: Int;
}

export interface UserCreateInput {
  code?: String;
  createTime?: DateTimeInput;
  email?: String;
  updateTime?: DateTimeInput;
  userId?: Int;
  walletId?: UserWalletCreateOneWithoutUserInput;
}

export interface GemTransactionUpdateManyMutationInput {
  amount?: Int;
  blockNumber?: String;
  createTime?: DateTimeInput;
  receiverAddress?: String;
  receiverUserRowId?: Int;
  rewardType?: String;
  senderAddress?: String;
  senderUserRowId?: Int;
  status?: Boolean;
  txhash?: String;
}

export interface GemTransactionUpdateInput {
  amount?: Int;
  blockNumber?: String;
  createTime?: DateTimeInput;
  receiverAddress?: String;
  receiverUserRowId?: Int;
  rewardType?: String;
  senderAddress?: String;
  senderUserRowId?: Int;
  status?: Boolean;
  txhash?: String;
}

export interface GemTransactionCreateInput {
  amount?: Int;
  blockNumber?: String;
  createTime?: DateTimeInput;
  receiverAddress?: String;
  receiverUserRowId?: Int;
  rewardType?: String;
  senderAddress?: String;
  senderUserRowId?: Int;
  status?: Boolean;
  txhash?: String;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserWalletSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWalletWhereInput;
  AND?: UserWalletSubscriptionWhereInput[] | UserWalletSubscriptionWhereInput;
  OR?: UserWalletSubscriptionWhereInput[] | UserWalletSubscriptionWhereInput;
  NOT?: UserWalletSubscriptionWhereInput[] | UserWalletSubscriptionWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface GemRewardTypeWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  amount?: Int;
  amount_not?: Int;
  amount_in?: Int[] | Int;
  amount_not_in?: Int[] | Int;
  amount_lt?: Int;
  amount_lte?: Int;
  amount_gt?: Int;
  amount_gte?: Int;
  contents?: String;
  contents_not?: String;
  contents_in?: String[] | String;
  contents_not_in?: String[] | String;
  contents_lt?: String;
  contents_lte?: String;
  contents_gt?: String;
  contents_gte?: String;
  contents_contains?: String;
  contents_not_contains?: String;
  contents_starts_with?: String;
  contents_not_starts_with?: String;
  contents_ends_with?: String;
  contents_not_ends_with?: String;
  createTime?: DateTimeInput;
  createTime_not?: DateTimeInput;
  createTime_in?: DateTimeInput[] | DateTimeInput;
  createTime_not_in?: DateTimeInput[] | DateTimeInput;
  createTime_lt?: DateTimeInput;
  createTime_lte?: DateTimeInput;
  createTime_gt?: DateTimeInput;
  createTime_gte?: DateTimeInput;
  updateTime?: DateTimeInput;
  updateTime_not?: DateTimeInput;
  updateTime_in?: DateTimeInput[] | DateTimeInput;
  updateTime_not_in?: DateTimeInput[] | DateTimeInput;
  updateTime_lt?: DateTimeInput;
  updateTime_lte?: DateTimeInput;
  updateTime_gt?: DateTimeInput;
  updateTime_gte?: DateTimeInput;
  AND?: GemRewardTypeWhereInput[] | GemRewardTypeWhereInput;
  OR?: GemRewardTypeWhereInput[] | GemRewardTypeWhereInput;
  NOT?: GemRewardTypeWhereInput[] | GemRewardTypeWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateGemRewardType {
  count: Int;
}

export interface AggregateGemRewardTypePromise
  extends Promise<AggregateGemRewardType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGemRewardTypeSubscription
  extends Promise<AsyncIterator<AggregateGemRewardType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserWalletPreviousValues {
  id: Int;
  address?: String;
  createTime?: DateTimeOutput;
  status?: Boolean;
  updateTime?: DateTimeOutput;
  userRowId?: Int;
}

export interface UserWalletPreviousValuesPromise
  extends Promise<UserWalletPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  address: () => Promise<String>;
  createTime: () => Promise<DateTimeOutput>;
  status: () => Promise<Boolean>;
  updateTime: () => Promise<DateTimeOutput>;
  userRowId: () => Promise<Int>;
}

export interface UserWalletPreviousValuesSubscription
  extends Promise<AsyncIterator<UserWalletPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  address: () => Promise<AsyncIterator<String>>;
  createTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<Boolean>>;
  updateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  userRowId: () => Promise<AsyncIterator<Int>>;
}

export interface GemTransaction {
  id: Int;
  amount?: Int;
  blockNumber?: String;
  createTime?: DateTimeOutput;
  receiverAddress?: String;
  receiverUserRowId?: Int;
  rewardType?: String;
  senderAddress?: String;
  senderUserRowId?: Int;
  status?: Boolean;
  txhash?: String;
}

export interface GemTransactionPromise
  extends Promise<GemTransaction>,
    Fragmentable {
  id: () => Promise<Int>;
  amount: () => Promise<Int>;
  blockNumber: () => Promise<String>;
  createTime: () => Promise<DateTimeOutput>;
  receiverAddress: () => Promise<String>;
  receiverUserRowId: () => Promise<Int>;
  rewardType: () => Promise<String>;
  senderAddress: () => Promise<String>;
  senderUserRowId: () => Promise<Int>;
  status: () => Promise<Boolean>;
  txhash: () => Promise<String>;
}

export interface GemTransactionSubscription
  extends Promise<AsyncIterator<GemTransaction>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  amount: () => Promise<AsyncIterator<Int>>;
  blockNumber: () => Promise<AsyncIterator<String>>;
  createTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  receiverAddress: () => Promise<AsyncIterator<String>>;
  receiverUserRowId: () => Promise<AsyncIterator<Int>>;
  rewardType: () => Promise<AsyncIterator<String>>;
  senderAddress: () => Promise<AsyncIterator<String>>;
  senderUserRowId: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Boolean>>;
  txhash: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserWalletSubscriptionPayload {
  mutation: MutationType;
  node: UserWallet;
  updatedFields: String[];
  previousValues: UserWalletPreviousValues;
}

export interface UserWalletSubscriptionPayloadPromise
  extends Promise<UserWalletSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserWalletPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserWalletPreviousValuesPromise>() => T;
}

export interface UserWalletSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserWalletSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserWalletSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserWalletPreviousValuesSubscription>() => T;
}

export interface GemRewardTypeEdge {
  node: GemRewardType;
  cursor: String;
}

export interface GemRewardTypeEdgePromise
  extends Promise<GemRewardTypeEdge>,
    Fragmentable {
  node: <T = GemRewardTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GemRewardTypeEdgeSubscription
  extends Promise<AsyncIterator<GemRewardTypeEdge>>,
    Fragmentable {
  node: <T = GemRewardTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserWallet {
  count: Int;
}

export interface AggregateUserWalletPromise
  extends Promise<AggregateUserWallet>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserWalletSubscription
  extends Promise<AsyncIterator<AggregateUserWallet>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserWalletConnection {
  pageInfo: PageInfo;
  edges: UserWalletEdge[];
}

export interface UserWalletConnectionPromise
  extends Promise<UserWalletConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserWalletEdge>>() => T;
  aggregate: <T = AggregateUserWalletPromise>() => T;
}

export interface UserWalletConnectionSubscription
  extends Promise<AsyncIterator<UserWalletConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserWalletEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserWalletSubscription>() => T;
}

export interface GemRewardType {
  id: Int;
  amount?: Int;
  contents?: String;
  createTime?: DateTimeOutput;
  updateTime?: DateTimeOutput;
}

export interface GemRewardTypePromise
  extends Promise<GemRewardType>,
    Fragmentable {
  id: () => Promise<Int>;
  amount: () => Promise<Int>;
  contents: () => Promise<String>;
  createTime: () => Promise<DateTimeOutput>;
  updateTime: () => Promise<DateTimeOutput>;
}

export interface GemRewardTypeSubscription
  extends Promise<AsyncIterator<GemRewardType>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  amount: () => Promise<AsyncIterator<Int>>;
  contents: () => Promise<AsyncIterator<String>>;
  createTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserWallet {
  id: Int;
  address?: String;
  createTime?: DateTimeOutput;
  status?: Boolean;
  updateTime?: DateTimeOutput;
  userRowId?: Int;
}

export interface UserWalletPromise extends Promise<UserWallet>, Fragmentable {
  id: () => Promise<Int>;
  address: () => Promise<String>;
  createTime: () => Promise<DateTimeOutput>;
  status: () => Promise<Boolean>;
  updateTime: () => Promise<DateTimeOutput>;
  user: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  userRowId: () => Promise<Int>;
}

export interface UserWalletSubscription
  extends Promise<AsyncIterator<UserWallet>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  address: () => Promise<AsyncIterator<String>>;
  createTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<Boolean>>;
  updateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  userRowId: () => Promise<AsyncIterator<Int>>;
}

export interface GemRewardTypeConnection {
  pageInfo: PageInfo;
  edges: GemRewardTypeEdge[];
}

export interface GemRewardTypeConnectionPromise
  extends Promise<GemRewardTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GemRewardTypeEdge>>() => T;
  aggregate: <T = AggregateGemRewardTypePromise>() => T;
}

export interface GemRewardTypeConnectionSubscription
  extends Promise<AsyncIterator<GemRewardTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GemRewardTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGemRewardTypeSubscription>() => T;
}

export interface AggregateGemTransaction {
  count: Int;
}

export interface AggregateGemTransactionPromise
  extends Promise<AggregateGemTransaction>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGemTransactionSubscription
  extends Promise<AsyncIterator<AggregateGemTransaction>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GemRewardTypeSubscriptionPayload {
  mutation: MutationType;
  node: GemRewardType;
  updatedFields: String[];
  previousValues: GemRewardTypePreviousValues;
}

export interface GemRewardTypeSubscriptionPayloadPromise
  extends Promise<GemRewardTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GemRewardTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GemRewardTypePreviousValuesPromise>() => T;
}

export interface GemRewardTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GemRewardTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GemRewardTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GemRewardTypePreviousValuesSubscription>() => T;
}

export interface GemTransactionConnection {
  pageInfo: PageInfo;
  edges: GemTransactionEdge[];
}

export interface GemTransactionConnectionPromise
  extends Promise<GemTransactionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GemTransactionEdge>>() => T;
  aggregate: <T = AggregateGemTransactionPromise>() => T;
}

export interface GemTransactionConnectionSubscription
  extends Promise<AsyncIterator<GemTransactionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GemTransactionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGemTransactionSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GemTransactionPreviousValues {
  id: Int;
  amount?: Int;
  blockNumber?: String;
  createTime?: DateTimeOutput;
  receiverAddress?: String;
  receiverUserRowId?: Int;
  rewardType?: String;
  senderAddress?: String;
  senderUserRowId?: Int;
  status?: Boolean;
  txhash?: String;
}

export interface GemTransactionPreviousValuesPromise
  extends Promise<GemTransactionPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  amount: () => Promise<Int>;
  blockNumber: () => Promise<String>;
  createTime: () => Promise<DateTimeOutput>;
  receiverAddress: () => Promise<String>;
  receiverUserRowId: () => Promise<Int>;
  rewardType: () => Promise<String>;
  senderAddress: () => Promise<String>;
  senderUserRowId: () => Promise<Int>;
  status: () => Promise<Boolean>;
  txhash: () => Promise<String>;
}

export interface GemTransactionPreviousValuesSubscription
  extends Promise<AsyncIterator<GemTransactionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  amount: () => Promise<AsyncIterator<Int>>;
  blockNumber: () => Promise<AsyncIterator<String>>;
  createTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  receiverAddress: () => Promise<AsyncIterator<String>>;
  receiverUserRowId: () => Promise<AsyncIterator<Int>>;
  rewardType: () => Promise<AsyncIterator<String>>;
  senderAddress: () => Promise<AsyncIterator<String>>;
  senderUserRowId: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Boolean>>;
  txhash: () => Promise<AsyncIterator<String>>;
}

export interface GemTransactionSubscriptionPayload {
  mutation: MutationType;
  node: GemTransaction;
  updatedFields: String[];
  previousValues: GemTransactionPreviousValues;
}

export interface GemTransactionSubscriptionPayloadPromise
  extends Promise<GemTransactionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GemTransactionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GemTransactionPreviousValuesPromise>() => T;
}

export interface GemTransactionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GemTransactionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GemTransactionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GemTransactionPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: Int;
  code?: String;
  createTime?: DateTimeOutput;
  email?: String;
  updateTime?: DateTimeOutput;
  userId?: Int;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  code: () => Promise<String>;
  createTime: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  updateTime: () => Promise<DateTimeOutput>;
  userId: () => Promise<Int>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  code: () => Promise<AsyncIterator<String>>;
  createTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  updateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  userId: () => Promise<AsyncIterator<Int>>;
}

export interface GemRewardTypePreviousValues {
  id: Int;
  amount?: Int;
  contents?: String;
  createTime?: DateTimeOutput;
  updateTime?: DateTimeOutput;
}

export interface GemRewardTypePreviousValuesPromise
  extends Promise<GemRewardTypePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  amount: () => Promise<Int>;
  contents: () => Promise<String>;
  createTime: () => Promise<DateTimeOutput>;
  updateTime: () => Promise<DateTimeOutput>;
}

export interface GemRewardTypePreviousValuesSubscription
  extends Promise<AsyncIterator<GemRewardTypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  amount: () => Promise<AsyncIterator<Int>>;
  contents: () => Promise<AsyncIterator<String>>;
  createTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserWalletEdge {
  node: UserWallet;
  cursor: String;
}

export interface UserWalletEdgePromise
  extends Promise<UserWalletEdge>,
    Fragmentable {
  node: <T = UserWalletPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserWalletEdgeSubscription
  extends Promise<AsyncIterator<UserWalletEdge>>,
    Fragmentable {
  node: <T = UserWalletSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GemTransactionEdge {
  node: GemTransaction;
  cursor: String;
}

export interface GemTransactionEdgePromise
  extends Promise<GemTransactionEdge>,
    Fragmentable {
  node: <T = GemTransactionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GemTransactionEdgeSubscription
  extends Promise<AsyncIterator<GemTransactionEdge>>,
    Fragmentable {
  node: <T = GemTransactionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: Int;
  code?: String;
  createTime?: DateTimeOutput;
  email?: String;
  updateTime?: DateTimeOutput;
  userId?: Int;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<Int>;
  code: () => Promise<String>;
  createTime: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  updateTime: () => Promise<DateTimeOutput>;
  userId: () => Promise<Int>;
  walletId: <T = UserWalletPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  code: () => Promise<AsyncIterator<String>>;
  createTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  updateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  userId: () => Promise<AsyncIterator<Int>>;
  walletId: <T = UserWalletSubscription>() => T;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "GemRewardType",
    embedded: false
  },
  {
    name: "GemTransaction",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserWallet",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
